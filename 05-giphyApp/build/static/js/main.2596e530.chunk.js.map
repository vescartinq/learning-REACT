{"version":3,"sources":["components/AddCategory.jsx","actions/gifActions.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.jsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","otherValues","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAkBhD,OACE,0BAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAc,SAACS,GAAD,OAAkBP,GAAlB,mBAAiCO,OAC/CN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,wBACA,mCACG,GAGZC,EANe,kBACN,wBADM,qBAMqBC,UACxCH,GAPmB,kBAGH,GAHG,oBAEN,oCAFM,SAUFI,MAAMF,GAVJ,cAUfG,EAVe,gBAWEA,EAAKC,OAXP,uBAWbC,EAXa,EAWbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAjBjB,kBAqBdM,GArBc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,+BAAKA,EAAL,OCFOO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAa,MAEdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAgBxC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACX,GACtBS,EAAS,CACPf,KAAMM,EACNO,SAAS,SAGZ,CAACpB,IAEGqB,EDd2BI,CAAazB,GAAjCa,EAFyB,EAE/BN,KAAca,EAFiB,EAEjBA,QAEtB,OACE,oCACE,wBAAIJ,UAAU,qCAAd,IAAoDhB,EAApD,KAECoB,GAAW,uBAAGJ,UAAU,oCAAb,WAEZ,yBAAKA,UAAU,aACZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UEZ3BiB,EAAe,WAAO,IAAD,EACIzC,mBAAS,CAAC,aADd,mBACzB0C,EADyB,KACb3C,EADa,KAGhC,OACE,oCACE,4CACE,kBAAC,EAAD,CAAaA,cAAeA,IAC9B,6BAEA,4BACG2C,EAAWnB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS0B,IAAK1B,EAAUA,SAAUA,U,MCR5C6B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.2596e530.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(''); // ''  vs undefined (si no ponemos string vacio)\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  // Función que se ejecuta al clickar enter (<form onSubmit={handleSubmit}></form>)\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      //invertir el spread op para que primero aparezca la nueva categoria, y luego la antigua\r\n      setCategories((otherValues) => [inputValue, ...otherValues]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\n//  Regla para obligar a utilizar el componente AddCatgory con una función (setCategories)\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const apiUrl = 'api.giphy.com/v1/gifs';\r\n  const apiKey = 'HPqG9gDBAf3Yu78aQYSjVQp1XvmOPRCV';\r\n  const limitGifs = 20;\r\n\r\n  // encodeURI elimina espacios del input por + para la url\r\n  const url = `https://${apiUrl}/search?q=${encodeURI(\r\n    category\r\n  )}&limit=${limitGifs}&api_key=${apiKey}`;\r\n\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p> {title} </p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // destructuring del estado del hook\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","// CustomHooks\r\nimport { useState, useEffect } from 'react';\r\nimport { getGifs } from '../actions/gifActions';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  // Estado inicial CARGANDO\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((images) => {\r\n      setState({\r\n        data: images,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state; // Estado inicial: { data:[], loading: true };\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['Avengers']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { GifExpertApp } from './GifExpertApp';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\r\n"],"sourceRoot":""}